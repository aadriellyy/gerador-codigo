   






  /*
* Created on 2024-10-30 ( 11:31:29 )
* Generated by Telosys ( https://www.telosys.org/ ) version 4.1.0
*/ 








    package br.jus.tse.administrativa.rest;


import java.util.List;
import java.util.Optional;
import java.util.Set;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import br.jus.tse.administrativa.PessoaFisica;
import br.jus.tse.administrativa.PessoaFisicaService;
        
            
@RestController
@RequestMapping("//pessoafisica")
public class PessoaFisicaRestController {

private static final Logger LOGGER = LoggerFactory.getLogger(PessoaFisicaRestController.class);

private PessoaFisicaService service;

    public PessoaFisicaRestController(PessoaFisicaService service) {
        this.service = service;
    }

    @PostMapping(consumes = {MediaType.APPLICATION_JSON_VALUE}, produces = {MediaType.APPLICATION_JSON_VALUE})
    public ResponseEntity<?> save(@RequestBody PessoaFisicaRequest request){
        LOGGER.info("Iniciando criação de um novo PessoaFisica");

        Set< String > validations = request.isValidOnStage(ValidOnCreation.class);

        if(request == null){
            return ResponseEntity.badRequest().body("Não há dados para serem cadastrados");
        }

        if (!validations.isEmpty()) {
            return ResponseEntity.badRequest().body(validations);
        }

        PessoaFisica object = request.transform(
                 request.getNomeCompleto(),         request.getDtNascimento(),  request.getNrCpf()  );
        service.save(object);
        return ResponseEntity.ok().header("Custom-Header", "foo").body(object);
    }

    @GetMapping(produces= {MediaType.APPLICATION_JSON_VALUE})
    public ResponseEntity<?> findAll() {
        LOGGER.info("Buscando lista de PessoaFisica");
        List<PessoaFisica> list = service.findAll();
        return ResponseEntity.ok().header("Custom-Header", "foo").body(list);
    }

    @GetMapping(value="/{id}", produces = {MediaType.APPLICATION_JSON_VALUE})
        public ResponseEntity<?> findById(@PathVariable("id") Long id){
        LOGGER.info("Buscando PessoaFisica por id: {}", id);
        if(id == null){
            return ResponseEntity.badRequest().body("id inválido");
        }

        Optional<PessoaFisica> object = service.findById(id);
        if (object.isPresent()) {
            LOGGER.info("PessoaFisica encontrado com sucesso: {}");
            return ResponseEntity.ok().header("Custom-header", "foo").body(object.get());
        }else{
            LOGGER.info("PessoaFisica não encontrado pelo id: {}", id);
            return ResponseEntity.notFound().header("not-found-id", String.valueOf(id)).build();
        }
    }

                 
    @PutMapping(consumes = {MediaType.APPLICATION_JSON_VALUE}, produces= {MediaType.APPLICATION_JSON_VALUE})
    public ResponseEntity<?> update(@RequestBody PessoaFisicaRequest request) {
        LOGGER.info("Iniciando atualização de PessoaFisica pelo id: {}", request.getIdPessoa());

        Set<String> validations = request.isValidOnStage(ValidOnUpdate.class);
        if (!validations.isEmpty()) {
            return ResponseEntity.badRequest().body(validations);
        }

        Optional<PessoaFisica> possivelObject = service.findById(request.getIdPessoa());

        PessoaFisica object = possivelObject.get();
        object.transform(request);
        LOGGER.info("PessoaFisica encontrado com sucesso (controller): {}", object.logString());
        service.update(object);
        LOGGER.info("PessoaFisica atualizado(a) com sucesso: {}", object.logString());
        return ResponseEntity.ok().header("Custom-Header", "foo").body(object);

    }


    @DeleteMapping(value="/{id}", produces = {MediaType.APPLICATION_JSON_VALUE})
    public ResponseEntity<?> delete(@PathVariable("id") Long id) {
        LOGGER.info("Iniciando deleção de PessoaFisica pelo id: {}", id);
        Optional<PessoaFisica> possivelObject = service.findById(id);
        if (possivelObject.isPresent()) {
            PessoaFisica object = possivelObject.get();
            service.delete(object);
            LOGGER.info("PessoaFisica deletado(a) com sucesso: {}", object.logString());
            return ResponseEntity.ok().header("Custom-Header", "foo").body(object);
        }else{
            return ResponseEntity.notFound().header("not-found-id", String.valueOf(id)).build();
        }
    }

}
