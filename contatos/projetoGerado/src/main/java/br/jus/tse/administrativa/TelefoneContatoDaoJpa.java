







/*
* Created on 2024-10-30 ( 11:31:29 )
* Generated by Telosys ( https://www.telosys.org/ ) version 4.1.0
*/package br.jus.tse.administrativa;

import java.util.Collections;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.stereotype.Repository;

import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceException;
import jakarta.persistence.TypedQuery;

@Repository
public class TelefoneContatoDaoJpa implements TelefoneContatoDao{

    private EntityManager em;

    private static final Logger LOGGER = LoggerFactory.getLogger(TelefoneContatoDaoJpa.class);

    public TelefoneContatoDaoJpa(EntityManager em){
        super();
        this.em = em;
    }

    @Override
    public void save(TelefoneContato objTelefoneContato) {
        try{
            LOGGER.info("Tentando gravar TelefoneContato: {}", objTelefoneContato.logString());
            this.em.persist(objTelefoneContato);
            LOGGER.info("TelefoneContato gravado com sucesso: {}", objTelefoneContato.logString());
        }catch (Exception e){
            LOGGER.error("Erro ao gravar TelefoneContato {}", e.getMessage(), e);
        }
    }

    @Override
    public Optional<TelefoneContato> findById(Long id) {
        String jpql = "select entidade from TelefoneContato entidade where entidade.id=:id_entidade";

        TypedQuery<TelefoneContato>typedObjectQuery = em.createQuery(jpql, TelefoneContato.class);
        typedObjectQuery.setParameter("id_entidade", id);

        try {
            LOGGER.info("Recuperando TelefoneContato com ID: {}", id);
            TelefoneContato objTelefoneContato =  typedObjectQuery.getSingleResult();
            LOGGER.info("TelefoneContato recuperado com sucesso: {}", objTelefoneContato.logString());
            return Optional.of(objTelefoneContato);
        }
            catch(PersistenceException e) {
            LOGGER.error("Não foi possível recuperar o 'TelefoneContato' {} =>{}", id, e.getMessage(), e);
        }
        return Optional.empty();
    }

    @Override
    public List<TelefoneContato> findAll() {
        String jpql = "select entidade from TelefoneContato entidade";

        TypedQuery<TelefoneContato>typedObjectQuery = em.createQuery(jpql, TelefoneContato.class);

        try {
            LOGGER.info("Recuperando a lista de TelefoneContato.");
            List<TelefoneContato> list = typedObjectQuery.getResultList();
            LOGGER.info("Tamanho da lista recuperada: {}", list.size());
            return list;
        }
        catch(PersistenceException e) {
            LOGGER.error("Não foi possível recuperar a lista de 'TelefoneContato' {}.",e.getMessage(), e);
        }
        return Collections.emptyList();
    }

    @Override
    public void update(TelefoneContato objTelefoneContato) {
        try {
            LOGGER.info("Tentando atualizar TelefoneContato: {}", objTelefoneContato.logString());
            em.merge(objTelefoneContato);
            LOGGER.info("TelefoneContato atualizado com sucesso: {}", objTelefoneContato.logString());
        }catch(PersistenceException pe) {
            LOGGER.error("Não foi possível atualizar o 'TelefoneContato' {} => {}.", objTelefoneContato, pe.getMessage(), pe);
        }
    }

    @Override
    public void delete(TelefoneContato objTelefoneContato) {
        try{
            LOGGER.info("Tentando excluir TelefoneContato: {}", objTelefoneContato.logString());
            TelefoneContato objectFinal = em.find(TelefoneContato.class,  objTelefoneContato.getIdTelefone() );

            if (objectFinal != null) {
                em.remove(objectFinal);
                LOGGER.info("TelefoneContato excluída com sucesso: {}", objTelefoneContato.logString());
            }
        } catch (Exception e){
            LOGGER.error("Não foi possível excluir 'TelefoneContato' {} =>{}", objTelefoneContato.logString(), e.getMessage(), e);
        }
    }

}