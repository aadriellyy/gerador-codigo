  






 /*
* Created on 2024-10-30 ( 11:31:29 )
* Generated by Telosys ( https://www.telosys.org/ ) version 4.1.0
*/





package br.jus.tse.administrativa;
/*
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.time.LocalDate;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import br.jus.tse.administrativa.PessoaFisica;
import br.jus.tse.administrativa.PessoaFisicaService;
import br.jus.tse.administrativa.rest.PessoaFisicaRestController;

@WebMvcTest(PessoaFisicaRestController.class)
public class PessoaFisicaRequestTest {
    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private PessoaFisicaService repository;

    @Test
    void findAllTest() throws Exception {

        List<PessoaFisica> listPessoaFisica = new ArrayList<>();

        
    

                                                                                                                      
        Long idPessoa = (long) 1;

          
        String nomeCompleto = "texto a ser definido";

          
        LocalDate dtNascimento = LocalDate.of(2010, 10, 10);

          
        String nrCpf = "texto a ser definido";

                 
        PessoaFisica objPessoaFisica = new PessoaFisica(idPessoa, nomeCompleto, dtNascimento, nrCpf);
    
        listPessoaFisica.add(objPessoaFisica);


        when(repository.findAll()).thenReturn(listPessoaFisica);

        this.mockMvc.perform(get("///pessoafisica"))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.length()").value(idPessoa));
    }

    @Test
    void findByIdTest() throws Exception {

    
    

     
        Long idPessoa = (long) 1;

          
        String nomeCompleto = "texto a ser definido";

      
        LocalDate dtNascimento = LocalDate.of(2010, 10, 10);

          
        String nrCpf = "texto a ser definido";

 
    
        PessoaFisica objPessoaFisica = new PessoaFisica(idPessoa, nomeCompleto, dtNascimento, nrCpf);
    
        when(repository.findById(idPessoa)).thenReturn(Optional.of(objPessoaFisica));
        this.mockMvc.perform(get("//pessoafisica/idPessoa"))
            .andExpect(status().isOk())
         
            .andExpect(jsonPath("$.idPessoa").value(1)) 
         
            .andExpect(jsonPath("$.nomeCompleto").value("texto a ser definido")) 
         
            .andExpect(jsonPath("$.dtNascimento").value("2010- 10- 10"))

        
         
            .andExpect(jsonPath("$.nrCpf").value("texto a ser definido"));

        
        
}

    @Test
    void saveTest() throws Exception {

        
    

          
        Long idPessoa = (long) 1;

           
        String nomeCompleto = "texto a ser definido";

           
        LocalDate dtNascimento = LocalDate.of(2010, 10, 10);

           
        String nrCpf = "texto a ser definido";

         
    
        PessoaFisica objPessoaFisica = new PessoaFisica(idPessoa, nomeCompleto, dtNascimento, nrCpf);
    
        String objPessoaFisicaJson = "{ defina o corpo do objeto em formato Json}";

        this.mockMvc.perform(post("//pessoafisica").contentType(MediaType.APPLICATION_JSON).content(objPessoaFisicaJson))
            .andExpect(status().isOk())

             
            .andExpect(jsonPath("$.idPessoa").value(1)) 
             
            .andExpect(jsonPath("$.nomeCompleto").value("texto a ser definido")) 
             
            .andExpect(jsonPath("$.dtNascimento").value("2010- 10- 10"))

            
             
            .andExpect(jsonPath("$.nrCpf").value("texto a ser definido"));

            
                }

    @Test
    void updateTest() throws Exception {

    
    

     
        Long idPessoa = (long) 1;

          
        String nomeCompleto = "texto a ser definido";

      
        LocalDate dtNascimento = LocalDate.of(2010, 10, 10);

      
        String nrCpf = "texto a ser definido";

     
    
        PessoaFisica objPessoaFisica = new PessoaFisica(idPessoa, nomeCompleto, dtNascimento, nrCpf);
    
        String objPessoaFisicaJson = "{ defina o corpo do objeto em formato Json}";

        when(repository.findById(idPessoa)).thenReturn(Optional.of(objPessoaFisica));

        this.mockMvc.perform(put("//pessoafisica").contentType(MediaType.APPLICATION_JSON).content(objPessoaFisicaJson))
            .andExpect(status().isOk())

             
            .andExpect(jsonPath("$.idPessoa").value(1)) 
             
            .andExpect(jsonPath("$.nomeCompleto").value("texto a ser definido")) 
             
            .andExpect(jsonPath("$.dtNascimento").value("2010- 10- 10"))

            
             
            .andExpect(jsonPath("$.nrCpf").value("texto a ser definido"));

            
                }

    @Test
    void deleteTest() throws Exception {

    
    

     
        Long idPessoa = (long) 1;

      
        String nomeCompleto = "texto a ser definido";

      
        LocalDate dtNascimento = LocalDate.of(2010, 10, 10);

      
        String nrCpf = "texto a ser definido";

     
    
        PessoaFisica objPessoaFisica = new PessoaFisica(idPessoa, nomeCompleto, dtNascimento, nrCpf);
    
        when(repository.findById(idPessoa)).thenReturn(Optional.of(objPessoaFisica));

        this.mockMvc.perform(delete("//pessoafisica/idPessoa"))
            .andExpect(status().isOk())

             
            .andExpect(jsonPath("$.idPessoa").value(1)) 
             
            .andExpect(jsonPath("$.nomeCompleto").value("texto a ser definido")) 
             
            .andExpect(jsonPath("$.dtNascimento").value("2010- 10- 10"))

            
             
            .andExpect(jsonPath("$.nrCpf").value("texto a ser definido"));

            
                }


}

                                                                                                                                                            

*/