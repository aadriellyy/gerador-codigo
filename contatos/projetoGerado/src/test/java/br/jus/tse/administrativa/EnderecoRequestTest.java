  






 /*
* Created on 2024-10-30 ( 11:31:29 )
* Generated by Telosys ( https://www.telosys.org/ ) version 4.1.0
*/





package br.jus.tse.administrativa;
/*
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.put;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.jsonPath;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;

import java.time.LocalDate;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.web.servlet.MockMvc;

import br.jus.tse.administrativa.Endereco;
import br.jus.tse.administrativa.EnderecoService;
import br.jus.tse.administrativa.rest.EnderecoRestController;

@WebMvcTest(EnderecoRestController.class)
public class EnderecoRequestTest {
    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private EnderecoService repository;

    @Test
    void findAllTest() throws Exception {

        List<Endereco> listEndereco = new ArrayList<>();

        
         
         
                                                                                                        
         
        String nomeCompleto = "texto a ser definido";

          
        LocalDate dtNascimento = LocalDate.of(2010, 10, 10);

          
        String nrCpf = "texto a ser definido";

         
        PessoaFisica objPessoaFisica = new PessoaFisica( nomeCompleto,   dtNascimento,   nrCpf  );

     

                                                                                                                                                                  
        Long idEndereco = (long) 1;

          
        String cep = "texto a ser definido";

          
        String logradouro = "texto a ser definido";

          
        String complemento = "texto a ser definido";

          
        Long fkidPessoa = (long) 2;

                                                                            
        Endereco objEndereco = new Endereco( idEndereco,     cep,     logradouro,     complemento,     objPessoaFisica     );

        
        listEndereco.add(objEndereco);


        when(repository.findAll()).thenReturn(listEndereco);

        this.mockMvc.perform(get("///endereco"))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.length()").value(idEndereco));
    }

    @Test
    void findByIdTest() throws Exception {

    
         
         
                                                                                                        
         
        String nomeCompleto = "texto a ser definido";

          
        LocalDate dtNascimento = LocalDate.of(2010, 10, 10);

          
        String nrCpf = "texto a ser definido";

         
        PessoaFisica objPessoaFisica = new PessoaFisica( nomeCompleto,   dtNascimento,   nrCpf  );

     

     
        Long idEndereco = (long) 1;

          
        String cep = "texto a ser definido";

      
        String logradouro = "texto a ser definido";

      
        String complemento = "texto a ser definido";

      
        Long fkidPessoa = (long) 2;

     
                                                               
        Endereco objEndereco = new Endereco( idEndereco,     cep,     logradouro,     complemento,     objPessoaFisica     );

    
        when(repository.findById(idEndereco)).thenReturn(Optional.of(objEndereco));
        this.mockMvc.perform(get("//endereco/idEndereco"))
            .andExpect(status().isOk())
         
            .andExpect(jsonPath("$.idEndereco").value(1)) 
         
            .andExpect(jsonPath("$.cep").value("texto a ser definido")) 
         
            .andExpect(jsonPath("$.logradouro").value("texto a ser definido")) 
         
            .andExpect(jsonPath("$.complemento").value("texto a ser definido")) 
         
            .andExpect(jsonPath("$.fkidPessoa").value(2));

        
        
}

    @Test
    void saveTest() throws Exception {

        
         
         
                                                                                                        
         
        String nomeCompleto = "texto a ser definido";

          
        LocalDate dtNascimento = LocalDate.of(2010, 10, 10);

          
        String nrCpf = "texto a ser definido";

         
        PessoaFisica objPessoaFisica = new PessoaFisica( nomeCompleto,   dtNascimento,   nrCpf  );

     

          
        Long idEndereco = (long) 1;

           
        String cep = "texto a ser definido";

           
        String logradouro = "texto a ser definido";

           
        String complemento = "texto a ser definido";

           
        Long fkidPessoa = (long) 2;

         
                                                               
        Endereco objEndereco = new Endereco( idEndereco,     cep,     logradouro,     complemento,     objPessoaFisica     );

    
        String objEnderecoJson = "{ defina o corpo do objeto em formato Json}";

        this.mockMvc.perform(post("//endereco").contentType(MediaType.APPLICATION_JSON).content(objEnderecoJson))
            .andExpect(status().isOk())

             
            .andExpect(jsonPath("$.idEndereco").value(1)) 
             
            .andExpect(jsonPath("$.cep").value("texto a ser definido")) 
             
            .andExpect(jsonPath("$.logradouro").value("texto a ser definido")) 
             
            .andExpect(jsonPath("$.complemento").value("texto a ser definido")) 
             
            .andExpect(jsonPath("$.fkidPessoa").value(2));

            
                }

    @Test
    void updateTest() throws Exception {

    
         
         
                                                                                                        
         
        String nomeCompleto = "texto a ser definido";

          
        LocalDate dtNascimento = LocalDate.of(2010, 10, 10);

          
        String nrCpf = "texto a ser definido";

         
        PessoaFisica objPessoaFisica = new PessoaFisica( nomeCompleto,   dtNascimento,   nrCpf  );

     

     
        Long idEndereco = (long) 1;

          
        String cep = "texto a ser definido";

      
        String logradouro = "texto a ser definido";

      
        String complemento = "texto a ser definido";

      
        Long fkidPessoa = (long) 2;

         
                                                               
        Endereco objEndereco = new Endereco( idEndereco,     cep,     logradouro,     complemento,     objPessoaFisica     );
    
        String objEnderecoJson = "{ defina o corpo do objeto em formato Json}";

        when(repository.findById(idEndereco)).thenReturn(Optional.of(objEndereco));

        this.mockMvc.perform(put("//endereco").contentType(MediaType.APPLICATION_JSON).content(objEnderecoJson))
            .andExpect(status().isOk())

             
            .andExpect(jsonPath("$.idEndereco").value(1)) 
             
            .andExpect(jsonPath("$.cep").value("texto a ser definido")) 
             
            .andExpect(jsonPath("$.logradouro").value("texto a ser definido")) 
             
            .andExpect(jsonPath("$.complemento").value("texto a ser definido")) 
             
            .andExpect(jsonPath("$.fkidPessoa").value(2));

            
                }

    @Test
    void deleteTest() throws Exception {

    
         
         
                                                                                                        
         
        String nomeCompleto = "texto a ser definido";

          
        LocalDate dtNascimento = LocalDate.of(2010, 10, 10);

          
        String nrCpf = "texto a ser definido";

         
        PessoaFisica objPessoaFisica = new PessoaFisica( nomeCompleto,   dtNascimento,   nrCpf  );

     

     
        Long idEndereco = (long) 1;

      
        String cep = "texto a ser definido";

      
        String logradouro = "texto a ser definido";

      
        String complemento = "texto a ser definido";

      
        Long fkidPessoa = (long) 2;

     
                                                               
        Endereco objEndereco = new Endereco( idEndereco,     cep,     logradouro,     complemento,     objPessoaFisica     );

    
        when(repository.findById(idEndereco)).thenReturn(Optional.of(objEndereco));

        this.mockMvc.perform(delete("//endereco/idEndereco"))
            .andExpect(status().isOk())

             
            .andExpect(jsonPath("$.idEndereco").value(1)) 
             
            .andExpect(jsonPath("$.cep").value("texto a ser definido")) 
             
            .andExpect(jsonPath("$.logradouro").value("texto a ser definido")) 
             
            .andExpect(jsonPath("$.complemento").value("texto a ser definido")) 
             
            .andExpect(jsonPath("$.fkidPessoa").value(2));

            
                }


}

                                                                                                                                                            

*/